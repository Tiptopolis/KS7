package com.Rev.P1_Core.zCHEAT_CODEX;

import static com.Rev.P1_Core.AppUtils.*;

import java.util.Random;

import com.Rev.P1_Core.Primitive.aList;

public class LongestIncreasingSubSeq {

	public static LongestIncreasingSubSeq tst;

	aList<Integer> data = new aList<Integer>();
	int upperbound = 100;

	aList<Integer> cursor = new aList<Integer>();
	aList<Integer> max = new aList<Integer>();

	static {
		tst = new LongestIncreasingSubSeq();
	}

	public static void main(String... args) {
		tst.generateTstData(25);

		aList subst = new aList(tst.data);
		while (!subst.isEmpty()) {
			tst.doTest3();
		}

	}

	public void generateTstData(int n) {

		for (int i = 0; i < n; i++) {
			Random rand = new Random();
			int int_random = rand.nextInt(upperbound);
			data.append(int_random);
		}
	}

	//////
	// >>

	aList<aList> sq = new aList<aList>();

	public void doTest2(int startingIndex, int endIndex) {
		aList<Integer> localMax = new aList<Integer>();
		int lastMax = -1;

		for (int i = startingIndex; i < endIndex; i++) {
			if (data.get(i) > lastMax) {
				lastMax = data.get(i);
				localMax.append(data.get(i));
			}
		}

		sq.append(localMax);

		if (localMax.getSize() > max.getSize())
			max = new aList(localMax);

		if (startingIndex != data.getSize())
			doTest2(startingIndex + 1, data.getSize());

		Log("____________________________");
		Log("ALL: " + data);
		Log("Local: " + localMax);
		Log("MAX" + max);
	}

	public void doTest3() {

		int end = tst.data.getSize();
		while (end > 0) {
			tst.doTest2(0, end);
			end--;
		}

		while (!subst.isEmpty()) {
			Random rand = new Random();
			int int_random = rand.nextInt(subst.getSize());
			subst.remove(int_random);

		}
	}

	// >>
	//////

	public void doTest() {
		int lastMax = -1;
		int len = 0;
		for (int i = 0; i < data.getSize(); i++) {

			if (data.get(i) > lastMax) {
				lastMax = data.get(i);
				cursor.append(lastMax);
				len++;
			} else if (data.get(i) <= lastMax) {
				this.clip();
				lastMax = -1;
				len = 0;
			}
		}
		Log("____________________________");
		Log("ALL: " + data);
		Log("MAX" + max);

		cursor.clear();
		max.clear();
		data.clear();
	}

	private void clip() {
		// max = cursor;
		// max = new aList(cursor);
		Log("CLIP");
		Log("MAX: " + max.getSize() + "  " + max);
		Log("C>>: " + cursor.getSize() + "  " + cursor);
		if (cursor.getSize() > max.getSize()) {
			Log(cursor.getSize() + "::" + max.getSize() + " " + (cursor.getSize() > max.getSize()));
			max = new aList(cursor);
		}
		cursor = new aList();
	}
}
