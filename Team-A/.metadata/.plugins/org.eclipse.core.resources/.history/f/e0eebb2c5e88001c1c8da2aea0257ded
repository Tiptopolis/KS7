package com.Rev.P1_Core.zCHEAT_CODEX;

import static com.Rev.P1_Core.AppUtils.*;

import java.util.Random;

import com.Rev.P1_Core.Primitive.aList;

public class LongestIncreasingSubSeq {

	public static LongestIncreasingSubSeq tst;

	aList<Integer> data = new aList<Integer>();
	int upperbound = 100;

	aList<Integer> cursor = new aList<Integer>();
	aList<Integer> max = new aList<Integer>();

	static {
		tst = new LongestIncreasingSubSeq();
	}

	public static void main(String... args) {
		tst.generateTstData(50);
		tst.doTest2(0);
	}

	public void generateTstData(int n) {

		for (int i = 0; i < n; i++) {
			Random rand = new Random();
			int int_random = rand.nextInt(upperbound);
			data.append(int_random);
		}
	}

	//////
	// >>
	public void doTest() {
		int lastMax = -1;
		int len = 0;
		for (int i = 0; i < data.getSize(); i++) {

			if (data.get(i) > lastMax) {
				lastMax = data.get(i);
				cursor.append(lastMax);
				len++;
			} else if (data.get(i) <= lastMax) {
				this.clip();
				lastMax = -1;
				len = 0;
			}
		}
		Log("____________________________");
		Log("ALL: " + data);
		Log("MAX" + max);

		cursor.clear();
		max.clear();
		data.clear();
	}

	private void clip() {
		// max = cursor;
		// max = new aList(cursor);
		Log("CLIP");
		Log("MAX: " + max.getSize() + "  " + max);
		Log("C>>: " + cursor.getSize() + "  " + cursor);
		if (cursor.getSize() > max.getSize()) {
			Log(cursor.getSize() + "::" + max.getSize() + " " + (cursor.getSize() > max.getSize()));
			max = new aList(cursor);
		}
		cursor = new aList();
	}

	// >>
	//////
	aList<aList> sq = new aList<aList>();

	public void doTest2(int startingIndex) {
		aList<Integer> localMax = new aList<Integer>();
		int lastMax = -1;

		for (int i = 0; i < data.getSize(); i++) {
			if (data.get(i) > lastMax) {
				lastMax = data.get(i);
				localMax.append(data.get(i));
			} else
				sq.append(localMax);
			Log(localMax);
			sq.append(localMax);
		}
		max = new aList(localMax);
		if(startingIndex!=data.getSize())
			doTest2(startingIndex+1);
		Log("____________________________");
		Log("ALL: " + data);
		//Log("SEQ: " + sq);
		//Log("SEQ-");
		for(aList L : sq)
		{
			//Log(L.getSize() + " _" + L);
		}
		
		Log("MAX" + localMax);
	}

}
